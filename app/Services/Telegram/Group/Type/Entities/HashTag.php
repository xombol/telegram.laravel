<?php

namespace App\Services\Telegram\Group\Type\Entities;

use App\Enums\TelegramBotMethodEnum;
use App\Models\Telegram\Chat;
use App\Models\Telegram\Rating;
use App\Services\Quote\Quote;
use App\Services\Telegram\Api;
use App\Services\Weather\Weather;


class HashTag
{
    private Weather $weather;
    private Quote $quote;
    private Api $api;

    /**
     * @property Weather $weather
     */
    public function __construct(Weather $weather, Quote $quote, Api $api)
    {
        $this->weather = $weather;
        $this->quote = $quote;
        $this->api = $api;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
     *
     * @return void
     */
    public function filter(array $data)
    {
        if ($this->search('#–ø–æ–≥–æ–¥–∞', $data)) {
            $this->ent_weather($data);
        }
        if ($this->search('#—Ü–∏—Ç–∞—Ç–∞', $data)) {
            $this->ent_quote($data);
        }
        if ($this->search('#—Ç–æ–ø', $data)) {
            $this->ent_top($data);
        }

    }

    /**
     * –ø–æ–∏—Å–∫ –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞—É —Å—Ç—Ä–æ–∫–∏
     *
     * @param string $text
     * @return bool
     */
    private function search(string $text, array $data): bool
    {
        return (($data["text"] == $text) || (str_contains($data["text"], $text)));
    }

    /**
     * #–ø–æ–≥–æ–¥–∞ –∏ –≤—Å–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã
     *
     * @param Weather $weather
     * @return void
     */
    private function ent_weather(array $data)
    {

        $city = explode(' ', $data["text"], 2);
        if (!array_key_exists(1, $city)) {
            $city[1] = "–ö–∏—à–∏–Ω—ë–≤";
        }

        $data_weather = $this->weather->search($city[1]);

        if ($data_weather["count"] == 0) {
            $this->api->send(TelegramBotMethodEnum::SEND_MESSAGE, ['chat_id' => $data["chat"]["id"], 'parse_mode' => 'HTML', 'text' => "<pre>–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≥–æ—Ä–æ–¥ –±—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!!üßê</pre>"]);
            return;
        }
        $message_weather = '';
        foreach ($data_weather["list"] as $weather) {
            $message_weather .= $weather["name"] . ' (' . $weather["sys"]["country"] . ") \n";
            $message_weather .= "–í–µ—Ç–µ—Ä : {$weather["wind"]["speed"]} –º/—Å \n";

            $weather["main"]["temp"] ? $message_weather .= "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ : " . round($weather["main"]["temp"] - 271) : null;
            $weather["main"]["feels_like"] ? $message_weather .= "¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ : " . round($weather["main"]["feels_like"] - 271) : null;
            $weather["main"]["pressure"] ? $message_weather .= "¬∞C\n–î–∞–≤–ª–µ–Ω–∏–µ : {$weather["main"]["pressure"]} –º–º —Ä—Ç. —Å—Ç  \n" : null;
            $weather["main"]["humidity"] ? $message_weather .= "–í–ª–∞–∂–Ω–æ—Å—Ç—å : {$weather["main"]["humidity"]}% \n" : null;

            $weather["rain"] ? $message_weather .= "–ù–∞ —É–ª–∏—Ü–µ –¥–æ–∂–¥—å \n" : null;
            $weather["snow"] ? $message_weather .= "–ù–∞ —É–ª–∏—Ü–µ –∏–¥—ë—Ç —Å–Ω–µ–≥  \n" : null;
            $weather["clouds"]["all"] ? $message_weather .= "–û–±–ª–∞–∫–∞ : {$weather["clouds"]["all"]}% \n" : null;

            $message_weather .= "\n";
        }

        $params = [
            'chat_id' => $data["chat"]["id"],
            'parse_mode' => 'HTML',
            'text' => "<b>–ü–æ–≥–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É  </b><pre>{$data["text"]} \n\n" . $message_weather . "</pre><b>–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã–≥–ª—è–Ω–∏ –≤ –æ–∫–Ω–æ !ü§ó</b>"
        ];

        $this->api->send(TelegramBotMethodEnum::SEND_MESSAGE, $params, true);

    }

    /**
     * #—Ü–∏—Ç–∞—Ç–∞ —Ä–∞–Ω–¥–æ–º–Ω–∞—è
     *
     * @return void
     */
    private function ent_quote(array $data)
    {
        $res = $this->quote->random();
        $params = ['chat_id' => $data["chat"]["id"], 'parse_mode' => 'HTML', 'text' => "<b>{$data["text"]}</b><pre>" . $res . "</pre>"];

        $this->api->send(TelegramBotMethodEnum::SEND_MESSAGE, $params);
    }

    private function ent_top(array $data)
    {
        $chat = Chat::query()->where('chat_id', $data["chat"]["id"])->first();

        $top_us = Rating::query()->orderBy('value', 'desc')->where('chat_id', $chat->id)->limit(7)->get();

        $top_list = "–¢–æ–ø 7 —á–∞—Ç–∞:\n";

        foreach ($top_us as $key => $item) {
            $data_us = json_decode($this->api->getUser($data["chat"]["id"], $item->id_user_group), true);

            $first_name = array_key_exists("last_name", $data_us["result"]["user"]) ? ' ' . $data_us["result"]["user"]["last_name"] : '';
            $user_name = array_key_exists("username", $data_us["result"]["user"]) ? ' @' . $data_us["result"]["user"]["username"] : '';

            $top_list .= $key + 1 . '. ' . $data_us["result"]["user"]["first_name"] . $first_name . $user_name . ' (' . $item->value . ")\n";

        }

        $params = ['chat_id' => $data["chat"]["id"], 'parse_mode' => 'HTML', 'text' => "<b>{$top_list}</b>"];

        $this->api->send(TelegramBotMethodEnum::SEND_MESSAGE, $params);

    }

}
